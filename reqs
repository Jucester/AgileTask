v10.16

First Task:
in our app user can create a project and start inviting people to this project and should set a role for each member invited


Invite method
Admin and sub-admin only can invite people to this project.
By default itâ€™s only the owner (Admin) in this project. After inviting people and selecting the role for each (Developer, Client, Guest) then can set only one of the developers as sub-admin.

Roles
Owner:
Full access (edit project, archive/active, able to assign as a sub-admin user, remove user, change role, upload, download, delete, rename, move, invite, comment, replay, resolve, approve, trash control)

Sub-admin:
Full access (remove user, change role, upload, download, delete, rename, move, invite, comment, replay, resolve, approve, trash control)

Developer:
Mid access (upload, download, delete, rename, move, comment, replay, resolve, approve, trash control)

Client:
Min access (comment, replay, resolve, approve, the file manager is read-only)

Guest:
none registered user (comment, replay, resolve, approve, preview access-only)
the registered user (same as the viewer access)

at this moment the invite system is working, and we set the roles for each user, but with no limitation, all users are the same for now. we need to set the limitation for each role as described above

So what I mean is that every type of user has access to specific features. I want to limit those features depending on the specific role assigned to that user.

const Roles = {};

Roles.Owner = {
    name: 'Owner', 
    description: 'Full access (edit project, archive/active, able to assign as a sub-admin user, remove user, change role, upload, download, delete, rename, move, invite, comment, replay, resolve, approve, trash control)'
    permissions: [ 'edit', 'archive', 'active', 'removeUser', 'changeRole', 'upload', 'download', 'delete', 'rename', 'move', 'invite', 'comment', 'replay', 'resolve', 'approve', 'trashControl' ]
}
Roles.SubAdmin = { 
    name: 'Sub-admin', 
    permissions: ['read', 'edit'] 
}
Roles.Developer = { 
    name: 'guest', 
    permissions: ['read'] 
}
Roles.Client = { 
    name: 'guest', 
    permissions: ['read'] 
}
Roles.Guest = { 
    name: 'guest', 
    permissions: ['read'] 
}